1- Estabeleça um ambiente virtual dentro do diretório do projeto:
python -m virtualenv venv


2- python -m virtualenv venv:
venv/Scripts/activate


3- Instale o Django:
pip install django

4 - pip freeze > requirements.txt(boa pratica para saber as versões utilizadas) 

5- Crie o projeto Django:
django-admin startproject setup .

6- Rode o servidor pela primeira vez:
python manage.py runserver
__________________________________________________________________________________________________________________________________________________________________

idioma e timezona:
em setting na linha 106 e 107
LANGUAGE_CODE = 'pt-br'

TIME_ZONE = 'America/Sao_Paulo'
__________________________________________________________________________________________________________________________________________________________________

1) Crie um novo arquivo chamado .env no diretório raiz da aplicação para armazenar a SECRET_KEY
SECRET_KEY=<chave aleatória>


2) Instale o pacote python-dotenv(garantimos uma maior segurança na aplicação através da utilização do pacote python-dotenv)
pip install python-dotenv

3) Importe os pacotes python-dotenv e os no arquivo settings.py
load_dotenv()
SECRET_KEY = str(os.getenv('SECRET_KEY'))

5) Gere um arquivo .gitignore no diretório raiz do projeto e inclua o arquivo .env como conteúdo(atraves do site abaixo ele ja vem com o .env dentro, mas verifique)
.env

Site para colocar arquivos que nao precisam ser usado para exportar ao github. Tem de ser feita uma pasta "gitignore" e colocar tudo oq nao precisa
https://www.toptal.com/developers/gitignore/

No git para o github:
1º git init
2º git add . 
3º git config --global user.email "daniel.miguel.soares@gmail.com"
4º git config --global user.name "Daniel Miguel"
5º git commit -m "projeto alura_space"
6º git remote add origin https://github.com/DanielMigue/alura_space.git (o link se pega na criação do repositório)
7º git push origin master
____________________________________________________________
0) criação de app:
cmd: python manage.py startapp galeria
setting:
**INSTALLED_APPS** = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'galeria',
]

1) Acesse o arquivo views.py dentro do diretório do app galeria e crie um função responsável por mostrar um HTML da página principal do site;
from django.http import HttpResponse

def index(request):
    return HttpResponse('<h1>Bem vindo à minha primeira página!!!!</h1>')


2) Crie um novo arquivo chamado urls.py dentro do diretório da aplicação galeria;

3) Crie uma “palheta” de urls dentro do arquivo urls.py (do diretório galeria) que leve à função index;

from django.urls import path
from galeria.views import index

urlpatterns = [
    path('', index)
]


4) Altere o arquivo urls.py do diretório do projeto (setup) para incluir a "palheta" de urls mencionada no urls.py de galeria;

from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('galeria.urls'))
]

5)no settigs do setup digite na parte do templates 'DIRS': [os.path.join(BASE_DIR,'templates')],# referente ao local, onde fica os arquivos, e faça um arquivo escrito template no scopo do projeto, dentro dele
faço um arquivo index.html e na parte da views da galeria digite:
from django.shortcuts import render

def index(request):#função responsavel pela pagina principal, o request envia uma requisição
    return render(request, 'index.html')
______________________________________________________________________________________________________
1) Criamos uma página chamada templates no diretório raiz do nosso projeto;

2) Dentro da pasta templates, vamos criar um diretório para cada app que temos. Sendo assim, criamos um diretório chamado galeria;

3) Criamos um arquivo chamado index.html dentro do diretório galeria. Ele será a página principal do site;

4) Inserimos no arquivo index.html o código disponibilizado nesta página;

5) Indicamos no arquivo settings.py no diretório setup que os templates do projeto devem ser utilizados através do diretório templates;

….
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
….

6) Alteramos o arquivo views.py do app galeria para considerar essa mudança;
from django.shortcuts import render

def index(request):
    return render(request, ‘galeria/index.html’)

7) Incluímos os diretórios de arquivos estáticos styles e assets, que podem ser baixados neste link, dentro do diretório static presente no diretório setup;

8) Indicamos no arquivo settings.py no diretório setup que os arquivos estáticos do projeto devem ser utilizados através do diretório static;
….

STATIC_URL = 'static/'

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'setup/static')
]

STATIC_ROOT = os.path.join(BASE_DIR, 'static')
….

9) Rodamos o seguinte comando para fazer o django reconhecer os arquivos estáticos do projeto;
python manage.py collectstatic

10) Dentro do arquivo index.html inserimos a seguinte linha de código em Python que indicará que a página deve carregar arquivos estáticos;
{% load static %}
….

11) Mudamos a referência dos arquivos estáticos dentro do arquivo index.html para comunicar a localização dos arquivos estáticos através de código python;
{% load static %}
<!DOCTYPE html>
<html lang="pt-br">

<head>
    ….
    <link rel="stylesheet" href="{% static '/styles/style.css' %}">
</head>
